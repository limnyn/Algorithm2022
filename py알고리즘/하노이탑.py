# #하노이의 탑

# - 하노이의 탑이란? 


# (출처: 위키피디아)
# 1. 크기가 다른 원반 n개를 출발점 기둥에서 도착점 기둥로 전부 옮겨야 한다.

# 2. 원반은 한 번에 한 개씩만 옮길 수 있다.

# 2. 원반을 옮길 때는 한 기둥의 맨 위 원반을 빼내어, 다른 기중의 맨 위로만 옮길 수 있다.

# 4. 원반을 옮기는 과정에서 큰 원반을 작은 원반 위로 올릴 수 없다.

 

# - 하노이의 탑 알고리즘 풀이

# 1. 원반이 n개 일때, 1번 기둥에 있는 n-1개의 원반을 2번 기둥에 옮긴다.

# 2. 1번 기둥에 남아 있는 원반 중 가장 큰 원반을 3번으로 옮긴다.

# 3. 2번 기둥에 있는 n-1원반을 3번 기둥으로 옮긴다.

 

# 원반이 하나 더 작은 값의 알고리즘을 호출 하여 반복적으로 문제를 해결하는 재귀 호출 알고리즘이다.

# 하노이의 탑 
# 입력: 옮기려는 원반의 갯수 n 
# 옮길 원반이 현재 있는 출발점 기둥 from_pos 
# 원반을 옮길 도착점 기둥 to_pos 
# 옮기는 과정에서 사용할 보조 기둥 aux_pos 
# 출력: 원반을 옮기는 순서 
def hanoi(n, a, b):
    if n > 1:
        hanoi(n-1, a, 6-a-b)              # 기둥이 1개 이상이면 그룹으로 묶인 n-1개 원판을 
                                          # 중간으로 먼저 다 옮긴다
    print(a, b)

    if n > 1:
        hanoi(n-1, 6-a-b, b)

n = int(input())

print(2**n -1)                               #총 이동해야 하는 횟수
hanoi(n, 1, 3)


# ######또는
# # 하노이의 탑
# # 입력: 옮기려는 원반의 갯수 n
# #      옮길 원반이 현재 있는 출발점 기둥 from_pos
# #      원반을 옮길 도착점 기둥 to_pos
# #      옮기는 과정에서 사용할 보조 기둥 aux_pos
# # 출력: 원반을 옮기는 순서 

# def hanoi(n, from_pos, to_pos, aux_pos):
#     if n == 1:  # 원반 한 개를 옮기는 문제면 그냥 옮기면 됨
#         print(from_pos, "->", to_pos)
#         return

#     # 원반 n - 1개를 aux_pos로 이동(to_pos를 보조 기둥으로)
#     hanoi(n - 1, from_pos, aux_pos, to_pos)
#     # 가장 큰 원반을 목적지로 이동
#     print(from_pos, "->", to_pos)
#     # aux_pos에 있는 원반 n-1개를 목적지로 이동(from_pos를 보조 기둥으로)
#     hanoi(n - 1, aux_pos, to_pos, from_pos)

# print("n = 1")
# hanoi(1, 1, 3, 2)  # 원반 한 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)
# print("n = 2")
# hanoi(2, 1, 3, 2)  # 원반 두 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)
# print("n = 3")
# hanoi(3, 1, 3, 2) # 원반 세 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)